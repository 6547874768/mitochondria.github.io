import os
import datetime
import re

SITE_URL = "https://www.danilichev.info"

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
GA4_ID = "G-HMDTQL1LWD"
CLARITY_PROJECT_ID = "sdzy2un6sn"  # ‚Üê –í–ê–® CLARITY ID –£–ñ–ï –í–°–¢–ê–í–õ–ï–ù!

# Favicon HTML
FAVICON_HTML = '''    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />'''

# Google Analytics 4
GA4_HTML = f'''    <!-- Google Analytics 4 -->
    <script async src="https://www.googletagmanager.com/gtag/js?id={GA4_ID}"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){{dataLayer.push(arguments);}}
      gtag('js', new Date());
      gtag('config', '{GA4_ID}');
    </script>'''

# Microsoft Clarity
CLARITY_HTML = f'''    <!-- Microsoft Clarity -->
    <script type="text/javascript">
        (function(c,l,a,r,i,t,y){{
            c[a]=c[a]||function(){{(c[a].q=c[a].q||[]).push(arguments)}};
            t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
            y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
        }})(window, document, "clarity", "script", "{CLARITY_PROJECT_ID}");
    </script>'''

# Affiliate Tracking
AFFILIATE_HTML = '''    <script src="/affiliate-tracking.js"></script>'''

# Footer Component
FOOTER_HTML = '''    <script src="/footer-component.js"></script>'''

# ========== –£–¢–ò–õ–ò–¢–´ ==========

def get_all_html_files():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ HTML —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    html_files = []
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –§–ê–ô–õ–´ - –ù–ò–ö–û–ì–î–ê –ù–ï –¢–†–û–ì–ê–ï–ú
    protected_files = [
        'robots.txt',
        'CNAME',
        '.htaccess',
        '_headers',
        'site.webmanifest'
    ]
    
    for root, dirs, files in os.walk('.'):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
        if any(skip in root for skip in ['.git', '.github', 'node_modules']):
            continue
        for file in files:
            # –¢–û–õ–¨–ö–û HTML —Ñ–∞–π–ª—ã
            if file.endswith('.html'):
                filepath = os.path.join(root, file)
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if not any(protected in filepath for protected in protected_files):
                    html_files.append(filepath)
    return html_files

def is_content_page(filepath):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π"""
    # –°—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å —Ñ—É—Ç–µ—Ä
    excluded_pages = [
        'sitemap.html',  # –ö–∞—Ä—Ç–∞ —Å–∞–π—Ç–∞ - –Ω–µ –Ω—É–∂–µ–Ω —Ñ—É—Ç–µ—Ä
        '404.html'       # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ - –º–∏–Ω–∏–º–∞–ª–∏–∑–º –ª—É—á—à–µ
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    for page in excluded_pages:
        if page in filepath:
            return False
    
    # –í–°–Å –û–°–¢–ê–õ–¨–ù–û–ï –ø–æ–ª—É—á–∞–µ—Ç —Ñ—É—Ç–µ—Ä
    # (–≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω—É—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –¥–∞–∂–µ privacy/terms)
    return True

# ========== –§–£–ù–ö–¶–ò–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ==========

def add_component_to_head(content, component_html, component_name):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ <head> –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if component_name == "GA4" and GA4_ID in content:
        return content, False
    elif component_name == "Clarity" and "clarity" in content:
        return content, False
    elif component_name == "Favicon" and "favicon" in content.lower():
        return content, False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º </head>
    head_close = content.find('</head>')
    if head_close != -1:
        new_content = content[:head_close] + f"\n{component_html}\n" + content[head_close:]
        return new_content, True
    
    return content, False

def add_component_to_body(content, component_html, component_name):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–¥ </body> –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
    if component_name == "Affiliate" and "affiliate-tracking.js" in content:
        return content, False
    elif component_name == "Footer" and "footer-component.js" in content:
        return content, False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º </body>
    body_close = content.find('</body>')
    if body_close != -1:
        new_content = content[:body_close] + f"\n{component_html}\n" + content[body_close:]
        return new_content, True
    
    return content, False

# ========== –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò ==========

def process_all_pages():
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    html_files = get_all_html_files()
    updated_files = []
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML —Ñ–∞–π–ª–æ–≤")
    
    for filepath in html_files:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        changes = []
        
        # 1. Favicon (–¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
        content, added = add_component_to_head(content, FAVICON_HTML, "Favicon")
        if added:
            changes.append("Favicon")
        
        # 2. Google Analytics 4 (–¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
        content, added = add_component_to_head(content, GA4_HTML, "GA4")
        if added:
            changes.append("GA4")
        
        # 3. Microsoft Clarity (–¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
        content, added = add_component_to_head(content, CLARITY_HTML, "Clarity")
        if added:
            changes.append("Clarity")
        
        # 4. Affiliate Tracking (–¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        affiliate_path = AFFILIATE_HTML
        if '/' in filepath and filepath != './index.html':
            affiliate_path = affiliate_path.replace('"/affiliate-tracking.js"', '"../affiliate-tracking.js"')
        
        content, added = add_component_to_body(content, affiliate_path, "Affiliate")
        if added:
            changes.append("Affiliate")
        
        # 5. Footer Component (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
        if is_content_page(filepath):
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
            footer_path = FOOTER_HTML
            if '/' in filepath:
                footer_path = footer_path.replace('"/footer-component.js"', '"../footer-component.js"')
            
            content, added = add_component_to_body(content, footer_path, "Footer")
            if added:
                changes.append("Footer")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if content != original_content:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            updated_files.append(f"{filepath}: {', '.join(changes)}")
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {filepath} ({', '.join(changes)})")
    
    return updated_files

def generate_sitemap():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è sitemap.xml"""
    xml_content = '<?xml version="1.0" encoding="UTF-8"?>\n'
    xml_content += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n'
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    xml_content += f'''  <url>
    <loc>{SITE_URL}/</loc>
    <lastmod>{datetime.datetime.now().strftime('%Y-%m-%d')}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>\n'''
    
    # –í—Å–µ HTML —Ñ–∞–π–ª—ã
    for filepath in get_all_html_files():
        if filepath == './index.html':
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if any(cat in filepath for cat in ['health-supplements', 'brain-supplements', 
                                           'keto-recipes', 'weight-loss', 'anti-aging-hacks']):
            priority = '0.9'
        elif is_content_page(filepath):
            priority = '0.8'
        else:
            priority = '0.7'
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –≤ URL
        url_path = filepath.replace('./', '/').replace('\\', '/').replace('/index.html', '/')
        
        xml_content += f'''  <url>
    <loc>{SITE_URL}{url_path}</loc>
    <lastmod>{datetime.datetime.now().strftime('%Y-%m-%d')}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>{priority}</priority>
  </url>\n'''
    
    xml_content += '</urlset>'
    
    with open('sitemap.xml', 'w', encoding='utf-8') as f:
        f.write(xml_content)
    
    print("‚úÖ Sitemap.xml –æ–±–Ω–æ–≤–ª–µ–Ω")

# ========== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==========

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–∞–π—Ç–∞...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"‚úÖ Google Analytics ID: {GA4_ID}")
    print(f"‚úÖ Microsoft Clarity ID: {CLARITY_PROJECT_ID}")
    print("=" * 50)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    updated_files = process_all_pages()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è sitemap
    generate_sitemap()
    
    # –ò—Ç–æ–≥–∏
    print("=" * 50)
    if updated_files:
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(updated_files)}")
        for file_info in updated_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   {file_info}")
        if len(updated_files) > 10:
            print(f"   ... –∏ –µ—â–µ {len(updated_files) - 10} —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    
    print("=" * 50)
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
